<svg width="400" height="300" viewBox="0 0 400 300"
     xmlns="http://www.w3.org/2000/svg">
	<style>
	.pt{
		fill: white;
		stroke: blue;
		stroke-width: 2;
		cursor: move;
	}
	.line{
		fill: none;
		stroke: black;
		stroke-width: 2;
		stroke-dasharray: 2 2;
	}
	.selected {
		stroke: red;
	}
	.background {
		fill: lightyellow;
	}
	</style>
	<rect width="100%" height="100%" class="background"/>

	<script>
	function createElementSvg(tagName) {
		return document.createElementNS("http://www.w3.org/2000/svg", tagName);
	}
	(function () {
		const svg = document.getElementsByTagName('svg')[0];
		var state;

		function reset() {
			state = {state: 'start'};
		}

		function startDrawing(event) {
			state = {
				state: 'drawing',
				currentGroup: createElementSvg('g'),
				currentLine: createElementSvg('path'),
				currentPathData: `M${event.x} ${event.y}`
			};
			state.currentGroup.appendChild(state.currentLine);
			state.currentLine.setAttribute('class', 'line');
			svg.appendChild(state.currentGroup);
		}

		function startMoving(event) {
			state = {
				state: 'moving',
				currentPoint: event.target,
				currentLine: event.target.parentElement.getElementsByTagName('path')[0],
				pathDataBefore: "M",
				pathDataAfter: ""
			};
			state.currentPoint.classList.add('selected');
			let after = false;
			for (pt of event.target.parentElement.getElementsByTagName('circle')) {
				if (pt === state.currentPoint) {
					after = true;
					continue;
				}
				if (after) {
					state.pathDataAfter += `${pt.getAttribute('cx')} ${pt.getAttribute('cy')} `;
				} else {
					state.pathDataBefore += `${pt.getAttribute('cx')} ${pt.getAttribute('cy')} `;
				}
			}
		}
		
		svg.addEventListener('mousedown', event => {
			if (event.target.classList.contains('pt')) {
				if (state.state == 'start'){
					startMoving(event);
				}
			}
			else {
				if (event.button == 0) {
					if (state.state == 'start' || state.state == 'drawing') {
						let pt = createElementSvg('circle');
						pt.setAttribute('class', 'pt');
						pt.setAttribute('r', '3');
						pt.setAttribute('cx', event.x);
						pt.setAttribute('cy', event.y);
					
						if (state.state == 'drawing') {
							state.currentPathData += `L${event.x} ${event.y}`;
						} else {
							startDrawing(event);
						}
						state.currentGroup.appendChild(pt);
					}
				} else {
					if (state.state == 'drawing') {
						state.currentLine.setAttribute('d', state.currentPathData);
						reset();
						event.preventDefault();
					}
				}
			}
		});

		svg.addEventListener('dblclick', event => {
			if (state.state == 'drawing') {
				let pt = createElementSvg('circle');
				pt.setAttribute('class', 'pt');
				pt.setAttribute('r', '3');
				pt.setAttribute('cx', event.x);
				pt.setAttribute('cy', event.y);
				state.currentPathData += `L${event.x} ${event.y}`;
				state.currentGroup.appendChild(pt);
				state.currentLine.setAttribute('d', state.currentPathData);
				reset();
			}
		});
		
		svg.addEventListener('mousemove', event => {
			if(state.state == 'moving') {
				state.currentPoint.setAttribute('cx', event.x);
				state.currentPoint.setAttribute('cy', event.y);
				state.currentLine.setAttribute('d', `${state.pathDataBefore}${event.x} ${event.y} ${state.pathDataAfter}`);
			}
			else if(state.state == 'drawing') {
				state.currentLine.setAttribute('d', `${state.currentPathData}L${event.x} ${event.y}`);
			}
		});

		svg.addEventListener('mouseup', event => {
			if(state.state == 'moving') {
				state.currentPoint.setAttribute('cx', event.x);
				state.currentPoint.setAttribute('cy', event.y);
				state.currentLine.setAttribute('d', `${state.pathDataBefore}${event.x} ${event.y} ${state.pathDataAfter}`);
				state.currentPoint.classList.remove('selected');
				reset();
			}
			else if(state.state == 'drawing') {
				state.currentLine.setAttribute('d', `${state.currentPathData}L${event.x} ${event.y}`);
			}
		});

		reset();

	})();
	</script>
</svg>